// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Data4LifeSDK
import AppAuth
import CryptoSwift
import Data4LifeCrypto
import Data4LifeCrypto/*.Key*/
import Data4LifeFHIR
@_exported import Data4LifeSDK
import Data4LifeSDKUtils
import Foundation
import ModelIO
import ModelsR4
import SVProgressHUD
import SafariServices
import Security
import Swift
import UIKit
public enum Environment : Swift.CaseIterable {
  case development, staging, production, sandbox
  public var apiBaseString: Swift.String {
    get
  }
  public var host: Swift.String {
    get
  }
  public var apiBaseURL: Foundation.URL {
    get
  }
  public static func == (a: Data4LifeSDK.Environment, b: Data4LifeSDK.Environment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Data4LifeSDK.Environment]
  public static var allCases: [Data4LifeSDK.Environment] {
    get
  }
}
public protocol CustomIdentifierMutable : AnyObject {
  func addAdditionalId(_ id: Swift.String)
  func setAdditionalIds(_ ids: [Swift.String])
  func getAdditionalIds() -> [Swift.String]?
}
public struct FhirRecord<R> where R : Data4LifeSDK.AnyFhirResource {
  public let id: Swift.String
  public let fhirResource: R
  public let metadata: Data4LifeSDK.Metadata
  public let annotations: [Swift.String]
}
public enum Data4LifeSDKError : Foundation.LocalizedError {
  case unsupportedVersionRunning
  case invalidOperationFile
  case invalidRecordDateFormat
  case invalidRecordMissingResource
  case invalidRecordModelVersionNotSupported
  case invalidResourceMissingId
  case invalidResourceCouldNotContainAuthor
  case invalidResourceCouldNotConvertToType(Swift.String)
  case couldNotSynchronizeAttachments
  case invalidAttachmentPayloadType
  case invalidAttachmentPayloadHash
  case invalidAttachmentPayloadSize
  case invalidAttachmentMissingData
  case invalidAttachmentAdditionalId(Swift.String)
  case malformedAttachmentAdditionalId
  case resizingImageSmallerThanOriginalOne
  case invalidDataNotValidUTF8String
  case jsonSerialization(Swift.Error)
  case keyMissingInSerialization(key: Swift.String)
  case keychainItemNotFound(Swift.String)
  case notLoggedIn
  case timeout
  case network(Swift.Error)
  case networkUnavailable
  case couldNotReadBase64EncodedData
  case missingCommonKey
  case missingTagKey
  case invalidEncryptedDataSize
  case couldNotFindAttachment
  case downloadActionWasCancelled
  case couldNotEncodeAppData
  case emptyAnnotationNotAllowed
  case appAuth(Swift.Error)
  case userCanceledAuthFlow
  case authServerError
  case authNetworkError
  public enum ClientConfiguration {
    case clientIdentifierInInfoPlistInWrongFormat
    case appGroupsIdentifierMissingForKeychain
    case couldNotBuildBaseUrl
    case couldNotBuildRedirectUrl
    case couldNotBuildOauthUrls
    public static func == (a: Data4LifeSDK.Data4LifeSDKError.ClientConfiguration, b: Data4LifeSDK.Data4LifeSDKError.ClientConfiguration) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
extension Data4LifeSDKError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Data4LifeSDKError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
extension Data4LifeSDKError.ClientConfiguration : Swift.CustomStringConvertible, Foundation.LocalizedError {
  public var description: Swift.String {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
}
extension Data4LifeSDKError : Swift.Equatable {
  public static func == (lhs: Data4LifeSDK.Data4LifeSDKError, rhs: Data4LifeSDK.Data4LifeSDKError) -> Swift.Bool
  public static func == (lhs: Swift.Error, rhs: Data4LifeSDK.Data4LifeSDKError) -> Swift.Bool
}
extension Data4LifeClient {
  public func downloadFhirStu3Record<R>(withId identifier: Swift.String, of type: R.Type = R.self, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.FhirRecord<R>>) where R : Data4LifeSDK.FhirStu3Resource
  public func downloadFhirStu3Records<R>(withIds identifiers: [Swift.String], of type: R.Type = R.self, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Data4LifeSDK.FhirRecord<R>, Swift.String>>) where R : Data4LifeSDK.FhirStu3Resource
  @discardableResult
  public func downloadFhirStu3Attachment(withId identifier: Swift.String, recordId: Swift.String, downloadType: Data4LifeSDK.DownloadType = .full, queue: Dispatch.DispatchQueue = responseQueue, onProgressUpdated: ((Foundation.Progress) -> Swift.Void)? = nil, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeFHIR.Attachment>) -> Data4LifeSDK.Cancellable
  @discardableResult
  public func downloadFhirStu3Attachments(withIds identifiers: [Swift.String], recordId: Swift.String, downloadType: Data4LifeSDK.DownloadType = .full, queue: Dispatch.DispatchQueue = responseQueue, onProgressUpdated: ((Foundation.Progress) -> Swift.Void)? = nil, completion: @escaping Data4LifeSDK.ResultBlock<[Data4LifeFHIR.Attachment]>) -> Data4LifeSDK.Cancellable
}
public protocol Cancellable {
  func cancel()
}
public typealias FhirStu3Resource = Data4LifeFHIR.DomainResource
public typealias FhirResource = Data4LifeSDK.FhirStu3Resource
public typealias FhirR4Resource = ModelsR4.DomainResource
public protocol AnyFhirResource : AnyObject {
}
extension DomainResource : Data4LifeSDK.AnyFhirResource {
}
extension DomainResource : Data4LifeSDK.AnyFhirResource {
}
extension Data4LifeClient {
  public func downloadFhirR4Record<R>(withId identifier: Swift.String, of type: R.Type = R.self, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.FhirRecord<R>>) where R : Data4LifeSDK.FhirR4Resource
  public func downloadFhirR4Records<R>(withIds identifiers: [Swift.String], of type: R.Type = R.self, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Data4LifeSDK.FhirRecord<R>, Swift.String>>) where R : Data4LifeSDK.FhirR4Resource
  @discardableResult
  public func downloadFhirR4Attachment(withId identifier: Swift.String, recordId: Swift.String, downloadType: Data4LifeSDK.DownloadType = .full, queue: Dispatch.DispatchQueue = responseQueue, onProgressUpdated: ((Foundation.Progress) -> Swift.Void)? = nil, completion: @escaping Data4LifeSDK.ResultBlock<ModelsR4.Attachment>) -> Data4LifeSDK.Cancellable
  @discardableResult
  public func downloadFhirR4Attachments(withIds identifiers: [Swift.String], recordId: Swift.String, downloadType: Data4LifeSDK.DownloadType = .full, queue: Dispatch.DispatchQueue = responseQueue, onProgressUpdated: ((Foundation.Progress) -> Swift.Void)? = nil, completion: @escaping Data4LifeSDK.ResultBlock<[ModelsR4.Attachment]>) -> Data4LifeSDK.Cancellable
}
public struct Metadata {
  public var updatedDate: Foundation.Date
  public var createdDate: Foundation.Date
}
extension Result {
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
}
extension Attachment {
  public static func with(title: Swift.String, creationDate: Foundation.Date, contentType: Swift.String, data: Foundation.Data) throws -> ModelsR4.Attachment
}
extension SecKey {
  public func asData() throws -> Foundation.Data
}
public typealias ResultBlock<Value> = (Swift.Result<Value, Swift.Error>) -> Swift.Void
public typealias DefaultResultBlock = Data4LifeSDK.ResultBlock<Swift.Void>
public typealias BatchResult<T, R> = (success: [T], failed: [(object: R, error: Swift.Error)])
@_hasMissingDesignatedInitializers public class Data4LifeClient {
  public static var responseQueue: Dispatch.DispatchQueue {
    get
  }
  public static let `default`: Data4LifeSDK.Data4LifeClient
  public var clientId: Swift.String? {
    get
  }
  public var redirectURL: Swift.String? {
    get
  }
  public var isLoggingEnabled: Swift.Bool {
    get
    set
  }
  @objc deinit
}
extension Data4LifeClient {
  public static func configureWith(clientId: Swift.String, clientSecret: Swift.String, redirectURLString: Swift.String, environment: Data4LifeSDK.Environment, keychainGroupId: Swift.String? = nil, appGroupId: Swift.String? = nil)
  public func presentLogin(on viewController: UIKit.UIViewController, animated: Swift.Bool, scopes: [Swift.String]? = nil, presentationCompletion: (() -> Swift.Void)? = nil, loginCompletion: @escaping Data4LifeSDK.DefaultResultBlock)
  public func logout(queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.DefaultResultBlock)
  public func isUserLoggedIn(queue: Dispatch.DispatchQueue = responseQueue, _ completion: @escaping Data4LifeSDK.DefaultResultBlock)
  public func sessionStateDidChange(queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping (Swift.Bool) -> Swift.Void)
}
extension Data4LifeClient {
  public func handle(url: Foundation.URL)
}
public typealias Parameters = [Swift.String : Any]
extension Data4LifeClient {
  public func createFhirStu3Record<R>(_ resource: R, annotations: [Swift.String] = [], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.FhirRecord<R>>) where R : Data4LifeSDK.FhirStu3Resource
  public func createFhirStu3Records<R>(_ resources: [R], annotations: [Swift.String] = [], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Data4LifeSDK.FhirRecord<R>, R>>) where R : Data4LifeSDK.FhirStu3Resource
  public func updateFhirStu3Record<R>(_ resource: R, annotations: [Swift.String]? = nil, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.FhirRecord<R>>) where R : Data4LifeSDK.FhirStu3Resource
  public func updateFhirStu3Records<R>(_ resources: [R], annotations: [Swift.String]? = nil, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Data4LifeSDK.FhirRecord<R>, R>>) where R : Data4LifeSDK.FhirStu3Resource
  public func deleteFhirStu3Record(withId identifier: Swift.String, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Swift.Void>)
  public func deleteFhirStu3Records(withIds identifiers: [Swift.String], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Swift.String, Swift.String>>)
  public func fetchFhirStu3Record<R>(withId identifier: Swift.String, of type: R.Type = R.self, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.FhirRecord<R>>) where R : Data4LifeSDK.FhirStu3Resource
  public func fetchFhirStu3Records<R>(withIds identifiers: [Swift.String], of type: R.Type = R.self, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Data4LifeSDK.FhirRecord<R>, Swift.String>>) where R : Data4LifeSDK.FhirStu3Resource
  public func fetchFhirStu3Records<R>(of type: R.Type, size: Swift.Int = 10, page: Swift.Int = 1, from: Foundation.Date? = nil, to: Foundation.Date? = nil, annotations: [Swift.String] = [], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<[Data4LifeSDK.FhirRecord<R>]>) where R : Data4LifeSDK.FhirStu3Resource
  public func countFhirStu3Records<R>(of type: R.Type = R.self, annotations: [Swift.String] = [], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Swift.Int>) where R : Data4LifeSDK.FhirStu3Resource
}
extension Data4LifeClient {
  @available(iOS, deprecated: 1.9.0, renamed: "createFhirRecord", message: "Renamed to createFhirRecord")
  public func createRecord<R>(_ resource: R, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.FhirRecord<R>>) where R : Data4LifeSDK.FhirStu3Resource
  @available(iOS, deprecated: 1.9.0, renamed: "createFhirRecords", message: "Renamed to createFhirRecords")
  public func createRecords<R>(_ resources: [R], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Data4LifeSDK.FhirRecord<R>, R>>) where R : Data4LifeSDK.FhirStu3Resource
  @available(iOS, deprecated: 1.9.0, renamed: "updateFhirRecord", message: "Renamed to updateFhirRecord")
  public func updateRecord<R>(_ resource: R, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.FhirRecord<R>>) where R : Data4LifeSDK.FhirStu3Resource
  @available(iOS, deprecated: 1.9.0, renamed: "updateFhirRecords", message: "Renamed to updateFhirRecords")
  public func updateRecords<R>(_ resources: [R], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Data4LifeSDK.FhirRecord<R>, R>>) where R : Data4LifeSDK.FhirStu3Resource
  @available(iOS, deprecated: 1.9.0, renamed: "deleteFhirRecord", message: "Renamed to deleteFhirRecord")
  public func deleteRecord(withId identifier: Swift.String, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Swift.Void>)
  @available(iOS, deprecated: 1.9.0, renamed: "deleteFhirRecords", message: "Renamed to deleteFhirRecords")
  public func deleteRecords(withIds identifiers: [Swift.String], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Swift.String, Swift.String>>)
  @available(iOS, deprecated: 1.9.0, renamed: "fetchFhirRecord", message: "Renamed to fetchFhirRecord")
  public func fetchRecord<R>(withId identifier: Swift.String, of type: R.Type = R.self, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.FhirRecord<R>>) where R : Data4LifeSDK.FhirStu3Resource
  @available(iOS, deprecated: 1.9.0, renamed: "fetchFhirRecords", message: "Renamed to fetchFhirRecords")
  public func fetchRecords<R>(withIds identifiers: [Swift.String], of type: R.Type = R.self, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Data4LifeSDK.FhirRecord<R>, Swift.String>>) where R : Data4LifeSDK.FhirStu3Resource
  @available(iOS, deprecated: 1.9.0, renamed: "countFhirRecords", message: "Renamed to countFhirRecords")
  public func countRecords<R>(of type: R.Type = R.self, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Swift.Int>) where R : Data4LifeSDK.FhirStu3Resource
  @available(iOS, deprecated: 1.8.0, renamed: "fetchFhirRecords", message: "Renamed to fetchFhirRecords")
  public func fetchRecords<R>(of type: R.Type, size: Swift.Int = 10, page: Swift.Int = 1, from: Foundation.Date? = nil, to: Foundation.Date? = nil, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<[Data4LifeSDK.FhirRecord<R>]>) where R : Data4LifeSDK.FhirStu3Resource
}
public enum DownloadType {
  case full, medium, small
  public static func == (a: Data4LifeSDK.DownloadType, b: Data4LifeSDK.DownloadType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public typealias FhirStu3Element = Data4LifeFHIR.Element
public typealias FhirR4Element = ModelsR4.Element
extension Data4LifeClient {
  public func createAppDataRecord(_ data: Foundation.Data, annotations: [Swift.String] = [], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.AppDataRecord>)
  public func updateAppDataRecord(_ data: Foundation.Data, recordId: Swift.String, annotations: [Swift.String]? = nil, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.AppDataRecord>)
  public func deleteAppDataRecord(withId identifier: Swift.String, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Swift.Void>)
  public func fetchAppDataRecord(withId identifier: Swift.String, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.AppDataRecord>)
  public func fetchAppDataRecords(size: Swift.Int = 10, page: Swift.Int = 1, from: Foundation.Date? = nil, to: Foundation.Date? = nil, annotations: [Swift.String] = [], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<[Data4LifeSDK.AppDataRecord]>)
  public func countAppDataRecords(annotations: [Swift.String] = [], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Swift.Int>)
}
extension Data4LifeClient {
  public func createCodableAppDataRecord<D>(_ codable: D, annotations: [Swift.String] = [], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.AppDataRecord>) where D : Swift.Decodable, D : Swift.Encodable
  public func updateCodableAppDataRecord<D>(_ codable: D, recordId: Swift.String, annotations: [Swift.String]? = nil, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.AppDataRecord>) where D : Swift.Decodable, D : Swift.Encodable
}
public struct AppDataRecord {
  public let id: Swift.String
  public let data: Foundation.Data
  public let metadata: Data4LifeSDK.Metadata
  public let annotations: [Swift.String]
}
extension Data {
  public static var searchTags: [Swift.String : Swift.String] {
    get
  }
}
extension AppDataRecord {
  public func getDecodableResource<D>(of type: D.Type = D.self) throws -> D where D : Swift.Decodable
}
extension Data4LifeClient {
  public func createFhirR4Record<R>(_ resource: R, annotations: [Swift.String] = [], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.FhirRecord<R>>) where R : Data4LifeSDK.FhirR4Resource
  public func createFhirR4Records<R>(_ resources: [R], annotations: [Swift.String] = [], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Data4LifeSDK.FhirRecord<R>, R>>) where R : Data4LifeSDK.FhirR4Resource
  public func updateFhirR4Record<R>(_ resource: R, annotations: [Swift.String]? = nil, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.FhirRecord<R>>) where R : Data4LifeSDK.FhirR4Resource
  public func updateFhirR4Records<R>(_ resources: [R], annotations: [Swift.String]? = nil, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Data4LifeSDK.FhirRecord<R>, R>>) where R : Data4LifeSDK.FhirR4Resource
  public func deleteFhirR4Record(withId identifier: Swift.String, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Swift.Void>)
  public func deleteFhirR4Records(withIds identifiers: [Swift.String], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Swift.String, Swift.String>>)
  public func fetchFhirR4Record<R>(withId identifier: Swift.String, of type: R.Type = R.self, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.FhirRecord<R>>) where R : Data4LifeSDK.FhirR4Resource
  public func fetchFhirR4Records<R>(withIds identifiers: [Swift.String], of type: R.Type = R.self, queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Data4LifeSDK.BatchResult<Data4LifeSDK.FhirRecord<R>, Swift.String>>) where R : Data4LifeSDK.FhirR4Resource
  public func fetchFhirR4Records<R>(of type: R.Type, size: Swift.Int = 10, page: Swift.Int = 1, from: Foundation.Date? = nil, to: Foundation.Date? = nil, annotations: [Swift.String] = [], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<[Data4LifeSDK.FhirRecord<R>]>) where R : Data4LifeSDK.FhirR4Resource
  public func countFhirR4Records<R>(of type: R.Type = R.self, annotations: [Swift.String] = [], queue: Dispatch.DispatchQueue = responseQueue, completion: @escaping Data4LifeSDK.ResultBlock<Swift.Int>) where R : Data4LifeSDK.FhirR4Resource
}
extension Data4LifeSDK.Environment : Swift.Equatable {}
extension Data4LifeSDK.Environment : Swift.Hashable {}
extension Data4LifeFHIR.DocumentReference : Data4LifeSDK.CustomIdentifierMutable {}
extension Data4LifeFHIR.DiagnosticReport : Data4LifeSDK.CustomIdentifierMutable {}
extension Data4LifeFHIR.Practitioner : Data4LifeSDK.CustomIdentifierMutable {}
extension Data4LifeFHIR.Patient : Data4LifeSDK.CustomIdentifierMutable {}
extension Data4LifeFHIR.Observation : Data4LifeSDK.CustomIdentifierMutable {}
extension Data4LifeFHIR.Questionnaire : Data4LifeSDK.CustomIdentifierMutable {}
extension Data4LifeFHIR.CarePlan : Data4LifeSDK.CustomIdentifierMutable {}
extension Data4LifeFHIR.Organization : Data4LifeSDK.CustomIdentifierMutable {}
extension ModelsR4.DocumentReference : Data4LifeSDK.CustomIdentifierMutable {}
extension ModelsR4.Questionnaire : Data4LifeSDK.CustomIdentifierMutable {}
extension ModelsR4.Observation : Data4LifeSDK.CustomIdentifierMutable {}
extension ModelsR4.DiagnosticReport : Data4LifeSDK.CustomIdentifierMutable {}
extension ModelsR4.CarePlan : Data4LifeSDK.CustomIdentifierMutable {}
extension ModelsR4.Organization : Data4LifeSDK.CustomIdentifierMutable {}
extension ModelsR4.Practitioner : Data4LifeSDK.CustomIdentifierMutable {}
extension ModelsR4.Patient : Data4LifeSDK.CustomIdentifierMutable {}
extension Data4LifeSDK.Data4LifeSDKError.ClientConfiguration : Swift.Equatable {}
extension Data4LifeSDK.Data4LifeSDKError.ClientConfiguration : Swift.Hashable {}
extension Data4LifeSDK.DownloadType : Swift.Equatable {}
extension Data4LifeSDK.DownloadType : Swift.Hashable {}
