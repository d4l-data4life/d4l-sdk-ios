default_platform :ios

repository = "d4l-data4life/d4l-sdk-ios"
project = "Data4LifeSDK"
sdkScheme = "Data4LifeSDK"
sdkName = "Data4LifeSDK"

device = "iPhone 12"

platform :ios do
  desc "Run unit tests and upload code coverage"
  lane :test do
    scan(
      scheme: "Example",
      derived_data_path: "build/DerivedData",
      devices: device,
      code_coverage: true,
      clean: true
    )
  end

  desc "Package and release framework"
  desc "#### Options"
  desc " * **`version`** (required): The new version of the framework"
  desc " * **`api_token`** (required): Github API token"
  desc " * **`allow_dirty_branch`**: Allows the git branch to be dirty before continuing. Defaults to false"
  desc " * **`remote`**: The name of the git remote. Defaults to `origin`. (`DEPLOY_REMOTE`)"
  desc " * **`allow_branch`**: The name of the branch to build from. Defaults to `master`. (`DEPLOY_BRANCH`)"
  desc " * **`skip_git_pull`**: Skips pulling the git remote. Defaults to false"
  desc " * **`is_prerelease`**: Marks GitHub release as Pre-release. Defaults to false"
  lane :release_framework do | options |
    if options[:allow_dirty_branch] != true
      ensure_git_status_clean
    end

    if !options[:version]
      raise "No version specified!".red
    end

    if !options[:api_token]
      raise "No api_token specified!".red
    end

    version = options[:version]
    is_prerelease = options[:is_prerelease] ||= false

    remote = options[:remote] ? options[:remote] : (ENV["DEPLOY_REMOTE"] ? ENV["DEPLOY_REMOTE"] : "origin")
    allowed_branch = options[:allow_branch] ? options[:allow_branch] : (ENV["DEPLOY_BRANCH"] ? ENV["DEPLOY_BRANCH"] : "release/#{version}")
    ensure_git_branch(branch: allowed_branch)

    if options[:skip_git_pull] != true
      sh("git pull #{remote} #{allowed_branch}")
    end

    # Parse changelog data
    changelog_path = options[:changelog_path] ? options[:changelog_path] : "../CHANGELOG.md"
    changelog_data = File.read(changelog_path)
    # Try to find all markdown headers and split
    changelog_sections = changelog_data.split(/\#{2,3}\s/)
    # Look out for new section of the newest version
    current_changelog_index = changelog_sections.index { |h| h.start_with?("[#{version}]")}

    unless current_changelog_index
      UI.error("Please add all changes of the version to the CHANGELOG.md file")
    end

    # Get all split for this version and combine them again to one text
    changelog_header_indices = changelog_sections.each_with_index.select {|s, _| s.match(/^\[([0-9]+)\.([0-9]+)\.([0-9]+)\-?([0-9a-zA-Z]*)\.?([0-9a-zA-Z]*)\]/) }.map(&:last)
    next_changelog_index = changelog_header_indices.index { |h| h == current_changelog_index } + 1
    changelog = "### " + changelog_sections[current_changelog_index + 1...changelog_header_indices[next_changelog_index]].join("### ")

    # Ask for confirmation
    if prompt(text: "#{version} has been prepped for release. If you have any additional changes you would like to make to the README or CHANGELOG, please do those before continuing. Would you like to commit, tag, and push #{version} to #{remote}?".green, boolean: true, ci_input:"y")

      # Update version in different places
      update_plist_versions(sdk_version: version)
      update_readme_versions(version: version)

      # Generate new documentation using Asciidoc
      generate_docs(version: version)

      # Add and commit all of the generated files
      git_add
      git_commit(
        path: ".",
        message: "Preparing for the #{version} release"
      )

      # Build fat library for GitHub release page
      build_sdk_xcframework(version: version)

      # Push latest changes
      push_to_git_remote(
        remote: remote,
        tags: false
      )

      # Create and push new version tag
      add_git_tag(tag: "#{version}")
      push_git_tags(tag: "#{version}")

      # Post new release to GitHub
      archiveSDKPath = sdkFrameworkArchivePath(version)

      # Post new release to GitHub
      gh_release(
        version: version,
        api_token:options[:api_token],
        changelog: changelog,
        is_prerelease: is_prerelease,
        framework: archiveSDKPath
      )

    else
      Helper.log.info "When finished, commit your changes.".red
    end
  end

  desc "Build xcframework for distribution"
  lane :build_sdk_xcframework do |options|
    if options[:version] == nil
        raise "Missing sdk version".red
    end

    sdkFrameworkPath = "#{sdkName}.xcframework"
    build_project_xcframework(schemeName: sdkScheme,
                              frameworkName: sdkName,
                              outputPath: sdkFrameworkPath)

    Dir.chdir("..") do
      root = Dir.pwd
      configuration = "Release"
      buildPath = "xcbuild"

      archiveSDKPath = sdkFrameworkArchivePath(options[:version])

      if File.exist?(archiveSDKPath)
        sh "rm #{archiveSDKPath}"
      end

        sh "zip -r #{archiveSDKPath} #{sdkFrameworkPath}"
        sh "rm -rf #{sdkFrameworkPath}"
    end
  end

  desc "Build any project xcframework"
  lane :build_project_xcframework do |options|
    if options[:schemeName] == nil
        raise "Missing scheme name".red
    end
    if options[:frameworkName] == nil
        raise "Missing framework name".red
    end
    if options[:outputPath] == nil
        raise "Missing output path".red
    end

    Dir.chdir("..") do
      root = Dir.pwd
      configuration = "Release"
      buildPath = "xcbuild"

      schemeName = options[:schemeName]
      frameworkName = options[:frameworkName]
      outputPath = options[:outputPath]

      if File.exist?(buildPath)
        sh "rm -rf #{buildPath}"
      end
      if File.exist?(outputPath)
        sh "rm -rf #{outputPath}"
      end

      sh "rm -rf #{outputPath}"
      sh "xcodebuild archive -scheme #{schemeName} -configuration #{configuration} -archivePath #{buildPath}/#{configuration}/#{frameworkName}-iphonesimulator.xcarchive -destination 'generic/platform=iOS Simulator' SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES ENABLE_TESTABILITY=YES SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO"
      sh "xcodebuild archive -scheme #{schemeName} -configuration #{configuration} -archivePath #{buildPath}/#{configuration}/#{frameworkName}-iphoneos.xcarchive -destination 'generic/platform=iOS' SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO"
      sh "xcodebuild -create-xcframework -allow-internal-distribution \
          -framework #{buildPath}/#{configuration}/#{frameworkName}-iphonesimulator.xcarchive/Products/Library/Frameworks/#{frameworkName}.framework \
          -framework #{buildPath}/#{configuration}/#{frameworkName}-iphoneos.xcarchive/Products/Library/Frameworks/#{frameworkName}.framework \
          -output #{outputPath}"
    end
  end

  desc "Upload to a github release"
  lane :gh_release do |options|

    if options[:version] == nil
        raise "Missing release version".red
    end

    if options[:api_token] == nil
        raise "Missing api token".red
    end

    if options[:sdk_framework] == nil
        raise "Missing asset".red
    end

    isPrerelease = options[:is_prerelease]
    if isPrerelease == nil
        isPrerelease = true
    end

    changelog = options[:changelog]
    if changelog == nil
       changelog = "Pre-release"
    end

    set_github_release(
      repository_name: repository,
      api_token: options[:api_token],
      name: "#{options[:version]}",
      tag_name: options[:version],
      description: changelog,
      is_prerelease: isPrerelease,
      upload_assets: [options[:sdk_framework]]
    )
  end

  desc "Update AppStore and GCSDK version number in project plists"
  lane :update_plist_versions do |options|
    if options[:sdk_version] == nil
        raise "Missing SDK version".red
    end

    sdk_version = options[:sdk_version]
    app_store_version = sdk_version.split("-").first

    if app_store_version.match(/\A\d+(?:\.\d+)*\z/) == nil
        raise "Could not generate proper AppStore version format".red
    end

    plists = ["SDK/Sources/Info.plist", "SDK/Tests/Info.plist"]
    plists.each { |path|
      update_info_plist(
        xcodeproj: "#{project}.xcodeproj",
        plist_path: path,
        block: proc do |plist|
          plist["CFBundleShortVersionString"] = app_store_version
        end
      )

      update_info_plist(
        xcodeproj: "#{project}.xcodeproj",
        plist_path: "SDK/Sources/Data4LifeSDK-Version.plist",
        block: proc do |plist|
          plist["SDKVersion"] = sdk_version
        end
      )
    }
  end

  desc "Lint sources using swiftlint and check the license headers"
  lane :lint do |options|
    autocorrect = options[:autocorrect] == true

    swiftlint(
      mode: autocorrect ? :autocorrect : :lint,
      config_file: ".swiftlint.yml",
      strict: !autocorrect
    )
    lint_headers(autocorrect)
  end

  desc "Check license headers"
  lane :lint_headers do |options|
    autocorrect = options[:autocorrect] == true
    files = Dir.chdir("..") do
      files = Dir.glob('{SDK/Sources,SDK/Tests,Example}/**/*.{swift,h,cpp,m}')
    end
    license = "./LICENSE"

    lint_source_for_license_headers(
      license: license,
      files: files,
      autocorrect: autocorrect,
      strict: !autocorrect
    )
  end

  desc "Update version numbers in README.md"
  lane :update_readme_versions do | options |
    if !options[:version]
      raise "No version specified!".red
    end

    readme_path = "../README.md"
    sdk_version = options[:version]
    app_store_version = sdk_version.split("-").first

    if app_store_version.match(/\A\d+(?:\.\d+)*\z/) == nil
        raise "Could not generate proper AppStore version format".red
    end

    readme_contents = File.read(readme_path)
   
    updated = readme_contents.gsub(/v([0-9]+)\.([0-9]+)\.([0-9]+)-/, "v#{app_store_version}-")
    # Update GitHub pages version number (pattern: `/1.0.0)`)
    updated = updated.gsub(/\/([0-9]+)\.([0-9]+)\.([0-9]+)\)/, "\/#{app_store_version}\)")
    File.write(readme_path, updated)
  end

  desc "Generate docs per version using Asciidoctor"
  lane :generate_docs do | options |
    if options[:version] == nil
        raise "Missing version".red
    end

    version = options[:version]
    arguments = "project-version=" + version
    input_path = "../asciidoc/index.adoc"
    output_folder_path = "../docs/" + version
    output_filename_path = "index.html"
    output_final_path = output_folder_path + "/" + output_filename_path

    sh "rm -rf #{output_folder_path}"
    sh "mkdir #{output_folder_path}"
    sh "bundle exec asciidoctor -b html5 -d book -o #{output_final_path} -a #{arguments} #{input_path} "
  end

  def sdkFrameworkArchivePath(version)
     return "Data4LifeSDK-xcframework-#{version}.zip"
  end
end
